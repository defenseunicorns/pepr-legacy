apiVersion: v1
data:
  registries: registry1.dso.mil* | registry.dso.mil*
kind: ConfigMap
metadata:
  name: clusterregistries
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    meta.helm.sh/release-name: kyverno-kyvernopolicies
    meta.helm.sh/release-namespace: kyverno
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,Job,StatefulSet,CronJob
    policies.kyverno.io/category: Best Practices (Security)
    policies.kyverno.io/description: Images from unknown, public registries can be
      of dubious quality and may not be scanned and secured, representing a high degree
      of risk. Requiring use of known, approved registries helps reduce threat exposure
      by ensuring image pulls only come from them. This policy validates that all
      images originate from a registry in the approved list.
    policies.kyverno.io/minversion: 1.3.0
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Restrict Image Registries
  labels:
    app: kyverno
    app.kubernetes.io/component: policy
    app.kubernetes.io/instance: kyverno-kyvernopolicies
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kyverno-policies
    app.kubernetes.io/part-of: kyverno
    app.kubernetes.io/version: 1.0.1-bb.5
    helm.sh/chart: kyverno-policies-1.0.1-bb.5
    helm.toolkit.fluxcd.io/name: kyvernopolicies
    helm.toolkit.fluxcd.io/namespace: bigbang
  name: restrict-image-registries
spec:
  background: true
  failurePolicy: Fail
  rules:
  - name: validate-registries
    match:
      any:
      - resources:
          kinds:
          - Pod
    context:
      # Get the value of the Namespace annotation called `bigbang.dev/allowed-registries` and store. The value
      # must end with a wildcard. Currently assumes there is only a single registry name in the value.
      - name: nsregistries
        apiCall:
          urlPath: "/api/v1/namespaces/{{request.namespace}}"
          jmesPath: "metadata.annotations.\"bigbang.dev/allowed-registries\" || 'registry1.dso.mil*'"
      # Get the ConfigMap in the `default` Namespace called `clusterregistries` and store. The value of the key
      # must end with a wildcard. Currently assumes there is only a single registry name in the value.
      - name: clusterregistries
        configMap:
          name: clusterregistries
          namespace: default
    preconditions:
      any:
      - key: "{{request.operation || 'BACKGROUND'}}"
        operator: In
        value:
        - CREATE
        - UPDATE
    validate:
      message: This Pod names an image that is not from an approved registry.
      foreach:
      # Create a flattened array of all containers in the Pod.
      - list: "request.object.spec.[initContainers, ephemeralContainers, containers][]"
        deny:
          conditions:
            all:
              # Loop over every image and deny the Pod if any image doesn't match either the allowed registry in the
              # cluster ConfigMap or the annotation on the Namespace where the Pod is created.
              - key: "{{element.image}}"
                operator: NotEquals
                value: "{{nsregistries}}"
              - key: "{{element.image}}"
                operator: NotEquals
                value: "{{clusterregistries.data.registries}}"
  validationFailureAction: enforce
  webhookTimeoutSeconds: 30
